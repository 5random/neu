#TODO
"""
# üìã **Ausf√ºhrliche TODO-Liste f√ºr gui.py**

## üîç **Aktuelle Analyse der gui.py**

Die `gui.py` ist **komplett leer** und muss vollst√§ndig implementiert werden. Basierend auf der Projektbeschreibung und der bestehenden #codebase ist dies das **zentrale UI-Modul** f√ºr die Benutzerinteraktion.

**Erforderliche Funktionalit√§ten aus der Projektbeschreibung:**
- ‚úÖ Webcam-Stream-Anzeige
- ‚úÖ UVC-Kameraeinstellungen (alle 10 Parameter)
- ‚úÖ Bewegungserkennung-Status und -Steuerung
- ‚úÖ ROI-Definition und -Bearbeitung
- ‚úÖ Messungssteuerung (Start/Stop)
- ‚úÖ E-Mail-Empf√§nger-Verwaltung
- ‚úÖ "M√∂glichst einfaches und simples Programm"

---

## üéØ **TODO 1: Haupt-GUI-Klasse und Layout-Struktur definieren**

### **Problem:**
Keine GUI-Architektur vorhanden. NiceGUI-Integration muss von Grund auf aufgebaut werden.

### **Was zu tun ist:**
1. **CVDTrackerGUI Hauptklasse erstellen:**
   - Initialisierung mit `AppConfig`
   - Integration von `Camera`, `MotionDetector` (zuk√ºnftig)
   - State-Management f√ºr GUI-Status

2. **Grundlegendes Layout definieren:**
   - **Links:** Video-Stream-Anzeige (Hauptbereich)
   - **Rechts:** Steuerungsbereich mit Tabs/Accordion-Struktur
   - **Unten:** Status-Leiste mit aktuellen Informationen

3. **Responsive Design:**
   - Automatische Gr√∂√üenanpassung bei verschiedenen Bildschirmgr√∂√üen
   - Minimale Fenstergr√∂√üe f√ºr Usability definieren
   - Skalierbare Icons und Schriftgr√∂√üen

---

## üéØ **TODO 2: Video-Stream-Integration implementieren**

### **Problem:**
NiceGUI muss den Live-Stream der `Camera` anzeigen.

### **Was zu tun ist:**
1. **Video-Element erstellen:**
   - Integration mit `Camera` √ºber FastAPI-Endpoint
   - Automatische Stream-URL-Generierung
   - Fallback auf Placeholder-Bild bei Kamera-Fehlern

2. **Stream-Kontrollen hinzuf√ºgen:**
   - Play/Pause-Button f√ºr Stream
   - Vollbild-Modus f√ºr Video
   - Zoom-Funktionalit√§t (falls gew√ºnscht)

3. **Performance-Optimierung:**
   - Frame-Rate-Begrenzung f√ºr GUI-Performance
   - Adaptive Qualit√§t bei langsamer Verbindung
   - Pufferung f√ºr fl√ºssige Wiedergabe

---

## üéØ **TODO 3: UVC-Kamerasteuerung-GUI implementieren**

### **Problem:**
Alle 10 UVC-Parameter aus der Projektbeschreibung m√ºssen √ºber die GUI steuerbar sein.

### **Was zu tun ist:**
1. **UVC-Parameter-Panel erstellen:**
   - **Slider f√ºr kontinuierliche Werte:**
     - Helligkeit (Brightness)
     - Kontrast (Contrast)
     - S√§ttigung (Saturation)
     - Farbton (Hue)
     - Sch√§rfe (Sharpness)
     - Gamma
     - Verst√§rkung (Gain)
     - Gegenlichtkompensation (Backlight Compensation)

2. **Auto/Manual-Steuerung implementieren:**
   - **Wei√üabgleich (White Balance):**
     - Toggle-Switch f√ºr Auto/Manual
     - Slider f√ºr manuelle Werte (nur bei Manual aktiv)
   - **Belichtung (Exposure):**
     - Toggle-Switch f√ºr Auto/Manual
     - Slider f√ºr manuelle Belichtungszeit

3. **Parameter-Synchronisation:**
   - Live-Updates bei Slider-√Ñnderungen
   - R√ºckmeldung der tats√§chlich gesetzten Werte
   - Reset-Button f√ºr Standard-Werte

---

## üéØ **TODO 4: Bewegungserkennung-GUI implementieren**

### **Problem:**
Bewegungserkennung-Status und -Steuerung m√ºssen visualisiert werden.

### **Was zu tun ist:**
1. **Motion-Status-Anzeige:**
   - **Echtzeit-Status-Indikator:**
     - Gr√ºn: Bewegung erkannt
     - Rot: Keine Bewegung
     - Grau: Bewegungserkennung inaktiv
   - **Textuelle Status-Anzeige** mit Zeitstempel der letzten Bewegung

2. **Sensitivit√§ts-Steuerung:**
   - **Slider f√ºr Sensitivit√§t** (0.001 - 1.0)
   - **Preset-Buttons:** "Niedrig", "Mittel", "Hoch"
   - **Live-Anzeige** der aktuellen Empfindlichkeit

3. **Motion-History-Visualisierung:**
   - **Mini-Chart** der letzten Bewegungsereignisse
   - **Aktivit√§ts-Indikator** f√ºr die letzten Minuten
   - **Performance-Anzeige** (FPS, Verarbeitungszeit)

---

## üéØ **TODO 5: ROI (Region of Interest) Editor implementieren**

### **Problem:**
Benutzer m√ºssen eine ROI definieren k√∂nnen, um Fehlalarme zu minimieren.

### **Was zu tun ist:**
1. **ROI-Steuerung:**
   - **Enable/Disable Toggle** f√ºr ROI
   - **Koordinaten-Eingabe:** X, Y, Breite, H√∂he
   - **Reset-Button** f√ºr Vollbild-ROI

2. **Visueller ROI-Editor:**
   - **Overlay auf Video-Stream** mit ROI-Rechteck
   - **Drag-and-Drop** Funktionalit√§t f√ºr ROI-Anpassung
   - **Resize-Handles** an den Ecken des Rechtecks

3. **ROI-Validierung:**
   - **Automatische Gr√∂√üenbegrenzung** auf Video-Dimensionen
   - **Mindestgr√∂√üe** f√ºr sinnvolle Bewegungserkennung
   - **Live-Preview** der ROI-Auswirkung

---

## üéØ **TODO 6: Messungssteuerung-Interface implementieren**

### **Problem:**
√úberwachungszeitr√§ume m√ºssen gestartet und gestoppt werden k√∂nnen.

### **Was zu tun ist:**
1. **Messungssteuerung:**
   - **Start/Stop-Button** (gro√üer, prominenter Button)
   - **Session-Timer** mit aktueller Laufzeit
   - **Status-Anzeige:** "Aktiv", "Gestoppt", "Warten auf Bewegung"

2. **Alert-Delay-Konfiguration:**
   - **Eingabefeld** f√ºr Alert-Delay in Sekunden
   - **Live-Countdown** bis zum n√§chsten Alert
   - **Warnung** bei sehr kurzen oder langen Delays

3. **Messung-Historie:**
   - **Liste der letzten Messungen** mit Dauer und Ergebnis
   - **Export-Funktion** f√ºr Messdaten
   - **Statistiken** (Durchschnittliche Messzeit, Alert-Rate)

---

## üéØ **TODO 7: E-Mail-System-GUI implementieren**

### **Problem:**
Mehrere E-Mail-Empf√§nger m√ºssen verwaltet und konfiguriert werden.

### **Was zu tun ist:**
1. **E-Mail-Empf√§nger-Verwaltung:**
   - **Liste aktueller Empf√§nger** mit Add/Remove-Funktionalit√§t
   - **E-Mail-Validierung** beim Hinzuf√ºgen
   - **Test-E-Mail-Funktion** f√ºr jeden Empf√§nger

2. **E-Mail-Template-Editor:**
   - **Betreff-Feld** mit Platzhaltern ({timestamp}, {camera_index})
   - **Nachrichtentext-Editor** mit Vorschau
   - **Bildanhang-Optionen** (Format, Qualit√§t)

3. **SMTP-Konfiguration:**
   - **Server/Port-Eingabe** (einfach, da keine Sicherheit erforderlich)
   - **Test-Verbindung-Button**
   - **E-Mail-Historie** der versendeten Nachrichten

---

## üéØ **TODO 8: Status-System und Feedback implementieren**

### **Problem:**
Benutzer brauchen Feedback √ºber den aktuellen System-Status.

### **Was zu tun ist:**
1. **Status-Leiste erstellen:**
   - **Kamera-Status:** Verbunden/Getrennt, Aufl√∂sung, FPS
   - **Motion-Status:** Aktiv/Inaktiv, letzte Bewegung
   - **System-Status:** CPU-Last, Speicherverbrauch

2. **Notification-System:**
   - **Toast-Nachrichten** f√ºr wichtige Events
   - **Error-Alerts** bei Problemen
   - **Success-Best√§tigungen** bei Aktionen

3. **Log-Viewer:**
   - **Mini-Log-Fenster** mit den letzten Systemmeldungen
   - **Filter-Optionen** nach Log-Level
   - **Export-Funktion** f√ºr Logs

---

## üéØ **TODO 9: Vereinfachung und Usability f√ºr "einfaches Programm"**

### **Problem:**
GUI muss trotz vieler Features einfach und intuitiv bleiben.

### **Was zu tun ist:**
1. **Intelligente Defaults:**
   - **Auto-Konfiguration** beim ersten Start
   - **Sinnvolle Standardwerte** f√ºr alle Parameter
   - **Wizard-Modus** f√ºr Erst-Setup

2. **Progressive Disclosure:**
   - **Basic/Advanced-Modi** mit unterschiedlicher Komplexit√§t
   - **Accordion/Tab-Layout** f√ºr √ºbersichtliche Gruppierung
   - **Hilfe-Tooltips** bei allen wichtigen Elementen

3. **One-Click-Funktionen:**
   - **Quick-Start-Button** f√ºr sofortige √úberwachung
   - **Preset-Profile** f√ºr typische Anwendungsf√§lle
   - **Import/Export** von Konfigurationen

---

## üéØ **TODO 10: Error-Handling und Robustheit**

### **Problem:**
GUI muss robust gegen Benutzer-Fehler und System-Probleme sein.

### **Was zu tun ist:**
1. **Input-Validierung:**
   - **Echtzeit-Validierung** aller Eingabefelder
   - **Range-Begrenzung** f√ºr numerische Werte
   - **Format-Pr√ºfung** f√ºr E-Mail-Adressen

2. **Graceful Degradation:**
   - **Fallback-UI** bei Kamera-Ausfall
   - **Offline-Modus** bei Netzwerk-Problemen
   - **Read-Only-Modus** bei kritischen Fehlern

3. **Recovery-Mechanismen:**
   - **Auto-Reconnect** bei Verbindungsverlust
   - **Configuration-Backup** vor √Ñnderungen
   - **Safe-Mode** mit minimaler Funktionalit√§t

---

## üìä **Priorit√§ts-Reihenfolge f√ºr die Umsetzung:**

### **üî• Kritisch (Basis-Funktionalit√§t):**
1. **TODO 1** - Haupt-GUI-Klasse und Layout
2. **TODO 2** - Video-Stream-Integration
3. **TODO 3** - UVC-Kamerasteuerung
4. **TODO 6** - Messungssteuerung

### **‚ö° Hoch (Kern-Features):**
5. **TODO 4** - Bewegungserkennung-GUI
6. **TODO 5** - ROI-Editor
7. **TODO 7** - E-Mail-System-GUI

### **üìã Mittel (Usability):**
8. **TODO 8** - Status-System und Feedback
9. **TODO 9** - Vereinfachung und Usability

### **üìù Niedrig (Robustheit):**
10. **TODO 10** - Error-Handling und Robustheit

**Die gui.py ist das Herzst√ºck der Benutzerinteraktion und muss alle Funktionen der Projektbeschreibung in einer einfachen, intuitiven Oberfl√§che vereinen.**

---

## üîó **Integration mit bestehender Codebase:**

- **Verwendet:** `AppConfig`, `WebcamConfig`, `UVCConfig`, `MotionDetectionConfig`
- **Integriert mit:** `Camera` f√ºr Video-Stream und UVC-Steuerung
- **Bereitet vor:** `MotionDetector` (noch zu implementieren), Alert-System
- **Framework:** NiceGUI f√ºr Web-basierte GUI
- **Einfachheit:** Fokus auf intuitive Bedienung trotz umfangreicher Funktionalit√§t
"""